generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model guilds {
  created  DateTime @default(now()) @db.Timestamp(0)
  guild_id String   @id @db.VarChar()
  premium  Boolean  @default(false) @db.Boolean
  banned   Boolean  @default(false) @db.Boolean
  dev      Boolean  @default(false) @db.Boolean

  log_join_leave String? @db.VarChar()
  log_events     String? @db.VarChar()
  log_bot        String? @db.VarChar()

  birthday_role    String? @db.VarChar()
  birthday_channel String? @db.VarChar()

  staff_role   String? @db.VarChar()
  unban_notice String? @db.VarChar(256)

  vc_category_id String? @db.VarChar()
  vc_channel_id  String? @db.VarChar()
  vc_limit       Int     @default(4) @db.Integer()

  level_modifier Float   @default(1.0) @db.DoublePrecision()
  level_channel  String? @db.VarChar()
  level_message  String? @default("You leveled up!, you're now {LEVEL}") @db.VarChar(256)
  level          Boolean @default(false) @db.Boolean()

  whitelist      whitelist[]
  self_role_main self_role_main[]
  birthdays      birthdays[]
  rcon           rcon[]
  levels         level[]
  level_reward   level_reward[]
  afk            afk[]
  private_vc     private_vc[]
  moderation_log moderation_log[]
  songs_played   songs_played[]
  command_log    command_log[]
}

model friendships {
  created   DateTime @default(now()) @db.Timestamp(0)
  user_id   String   @db.VarChar()
  friend_id String   @db.VarChar()
  pending   Boolean  @default(true) @db.Boolean

  @@unique([user_id, friend_id])
}

model banned_user {
  created DateTime @default(now()) @db.Timestamp(0)
  user_id String   @db.VarChar()
  reason  String?  @db.VarChar(256)

  @@unique([user_id])
}

model level {
  created DateTime @default(now()) @db.Timestamp(0)

  user_id  String @db.VarChar()
  guild_id String @db.VarChar()

  experience Int @default(0) @db.Integer()

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([user_id, guild_id])
}

model level_reward {
  created DateTime @default(now()) @db.Timestamp(0)

  role_id  String @db.VarChar()
  guild_id String @db.VarChar()

  level Int @db.Integer()

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([role_id])
}

model afk {
  created  DateTime @default(now()) @db.Timestamp(0)
  user_id  String   @db.VarChar()
  guild_id String   @db.VarChar()

  reason String? @db.VarChar(256)
  global Boolean @db.Boolean

  guild guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([guild_id, user_id])
}

model private_vc {
  created  DateTime @default(now()) @db.Timestamp(0)
  user_id  String   @db.VarChar()
  guild_id String   @db.VarChar()

  main_channel_id String @unique @db.VarChar()
  wait_channel_id String @unique @db.VarChar()

  guild guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([user_id, guild_id])
}

model birthdays {
  created DateTime @default(now()) @db.Timestamp(0)
  updated DateTime @default(now()) @db.Timestamp(0)

  user_id  String @db.VarChar()
  guild_id String @db.VarChar()

  birthday DateTime? @db.Timestamp(0)
  has_role Boolean   @default(false) @db.Boolean

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([user_id, guild_id])
}

model sessions {
  session_id    String   @id(map: "sessions_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created       DateTime @default(now()) @db.Timestamp(0)
  user_id       String   @db.VarChar()
  access_token  String   @db.Char(30)
  refresh_token String   @db.Char(30)
  expire        DateTime @db.Timestamp(6)
}

model self_role_main {
  uuid        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  guild_id    String  @db.VarChar()
  channel_id  String  @db.VarChar()
  message_id  String? @db.VarChar()
  title       String  @db.VarChar(64)
  description String  @db.VarChar(1024)

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict, map: "self_role_main_FK")

  self_role_roles self_role_roles[]
}

model self_role_roles {
  uuid      String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  main_uuid String @db.Uuid
  role_id   String @db.VarChar()

  title       String @db.VarChar(32)
  description String @db.VarChar(128)

  self_role_main self_role_main @relation(fields: [main_uuid], references: [uuid], onDelete: Cascade, onUpdate: Restrict, map: "self_role_roles_FK")

  @@unique([role_id, main_uuid])
  @@unique([title, main_uuid])
}

// Logs
model songs_played {
  uuid    String   @id(map: "songsPlayed_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created DateTime @default(now()) @db.Timestamp(0)

  guild_id String @db.VarChar()
  user_id  String @db.VarChar()

  song_duration Int  @db.Integer
  play_duration Int? @db.Integer

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@index([guild_id], map: "songsPlayed_FK")
}

model command_log {
  uuid    String   @id(map: "command_log_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created DateTime @default(now()) @db.Timestamp(0)

  guild_id   String? @db.VarChar()
  channel_id String? @db.VarChar()

  command_name String  @db.VarChar(32)
  user         String? @db.VarChar()

  hidden Boolean @db.Boolean

  guilds guilds? @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@index([guild_id], map: "command_log_FK")
}

model moderation_log {
  uuid    String   @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created DateTime @default(now()) @db.Timestamp(0)

  user      String? @db.VarChar()
  moderator String? @db.VarChar()
  guild_id  String  @db.VarChar()

  reason  String?   @db.VarChar(256)
  expiry  DateTime? @db.Timestamp(0)
  deleted Boolean   @default(false) @db.Boolean

  moderation_type moderation_type

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)

  @@unique([guild_id, uuid])
}

// Minecraft
model rcon {
  guild_id String  @id(map: "rcon_pk") @db.VarChar()
  host     String  @db.VarChar(32)
  port     Int
  password String  @db.VarChar(64)
  role_id  String? @db.VarChar()

  guilds guilds @relation(fields: [guild_id], references: [guild_id], onDelete: Cascade, onUpdate: Restrict)
}

model whitelist {
  guild_id String   @db.VarChar()
  created  DateTime @default(now()) @db.Timestamp(0)
  mc_uuid  String   @db.Char(32)
  user_id  String   @db.VarChar()
  uuid     String   @id(map: "whitelist_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

  guilds guilds @relation(fields: [guild_id], references: [guild_id])

  @@unique([guild_id, user_id], name: "whitelist_guild_user_un")
  @@unique([guild_id, mc_uuid], name: "whitelist_guild_uuid_un")
}

// Enums
enum moderation_type {
  ban
  kick
  warn
  timeout
}
